public class LinkedList{
    Integer size;
    Node nFirstNode;

    public void addToFront(Integer value){
        Node nCurrentFirstNode = nFirstNode;
        Node nNewFirstNode = new Node (value,nCurrentFirstNode);
        nFirstNode = nNewFirstNode;
        size++;
    }
    
    public Integer removeFromFront(){
        if (size()>1) {
            Integer iDateFromFirstNode = nFirstNode.data;
            nFirstNode = nFirstNode.next;
            size--;
            return iDateFromFirstNode;
        }
        else if (size()==1) { return nFirstNode.data ; size--; }
        else { return null ; }
    }
    
    public void addToTail(Integer value){
        Node nLastNode = getLastNodePointer();
        nLastNode.next = new Node(value);
        size++;
    }
    
    public Integer removeFromTail(){
        if (size()>1) {
            Node nBeforeLastNode = getBeforeLastNodePointer();
            Integer iDateFromLastNode = nBeforeLastNode.next.data;
            nBeforeLastNode.next = null;
            size--;
            return iDateFromLastNode;
        }
        else if (size()==1) { return nFirstNode.data ; size--; }
        else { return null ; }
    }
 
    public Node getLastNodePointer(){
        Integer iCounter = 1;    
        if (size()>=1){
            Node nCurrent = nFirstNode;
            while (iCounter<=size() && nCurrent.next!=null){
                nCurrent = nCurrent.next;
                iCounter++;
            }
            return nCurrent;
        }
        else { return null; }
    }

    public Node getBeforeLastNodePointer(){
        Integer iCounter = 1;
        if (size()>=2){
            Node nCurrent = nFirstNode;
            Node nAfterCurrent = nFirstNode.next;
            while (nAfterCurrent.next!=null){
                nCurrent = nAfterCurrent;
                nAfterCurrent = nAfterCurrent.next;
                iCounter++;
            }
            return nCurrent;
        }
        else { return null; }
    }

    public Integer size(){
        return size;
    }

    public LinkedList() {
        size = 0;
        nFirstNode = null;
    }  
}

public class Node{
    Integer data;
    Node next;

    public Node(Integer iInput) {
        data = iInput;
        next = null;
    }
    public Node(Integer iInput, Node nInput) {
        data = iInput;
        next = nInput;
    }
}